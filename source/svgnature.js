// Generated by CoffeeScript 1.3.3
(function() {
  var __slice = [].slice;

  (function($) {
    var clearPath, createNewPath, drawEnd, drawLine, drawStart, getCoords, getPath, getURI, initialize, move, setNextCoord, setPath;
    getCoords = function(e) {
      var $el, _ref;
      $el = $(this);
      if (e.touches) {
        return {
          x: e.touches[0].clientX,
          y: e.touches[0].clientY
        };
      } else if (((_ref = e.originalEvent) != null ? _ref.touches : void 0) != null) {
        return {
          x: e.originalEvent.touches[0].clientX,
          y: e.originalEvent.touches[0].clientY
        };
      } else {
        return {
          x: e.offsetX,
          y: e.offsetY
        };
      }
    };
    drawStart = function(e) {
      var $el;
      $el = $(this);
      $el.data('drawing.svgnature', true);
      if (!$el.data('pathObj.svgnature')) {
        createNewPath($el);
      }
      return setNextCoord($el, 'M', getCoords(e));
    };
    move = function(e) {
      var $el;
      $el = $(this);
      e.preventDefault();
      if ($el.data('drawing.svgnature')) {
        return drawLine($el, getCoords(e));
      }
    };
    drawEnd = function(e) {
      var $el;
      $el = $(this);
      return $el.data('drawing.svgnature', false);
    };
    drawLine = function($el, coords) {
      return $el.data('pathObj.svgnature').attr('path', setNextCoord($el, 'L', coords));
    };
    createNewPath = function($el) {
      var path, settings;
      settings = $el.data('settings.svgnature');
      path = $el.data('paper.svgnature').path().attr(settings);
      return $el.data('pathObj.svgnature', path);
    };
    setNextCoord = function($el, command, coords) {
      var oldPath;
      oldPath = $el.data('coords.svgnature');
      $el.data('coords.svgnature', "" + oldPath + command + coords.x + "," + coords.y);
      return $el.data('coords.svgnature');
    };
    setPath = function(elements, path) {
      var _this = this;
      return elements.each(function(i, el) {
        var newPath, oldPath;
        oldPath = $(el).data('coords.svgnature');
        newPath = "" + oldPath + " " + path;
        $(el).data('coords.svgnature', newPath);
        return $(el).data('pathObj.svgnature').attr('path', newPath);
      });
    };
    getPath = function(elements) {
      return elements.map(function(i, el) {
        return $(el).data('coords.svgnature');
      });
    };
    clearPath = function(elements) {
      return elements.each(function(i, el) {
        $(el).data('coords.svgnature', '');
        return $(el).data('pathObj.svgnature').attr('path', '');
      });
    };
    getURI = function(elements) {
      return elements.map(function(i, el) {
        var $el, paper, serializer;
        $el = $(el);
        paper = $el.data('paper.svgnature');
        serializer = new XMLSerializer;
        return "data:image/svg+xml;utf8," + (serializer.serializeToString(paper.canvas));
      });
    };
    initialize = function(elements, settings) {
      var _this = this;
      return elements.each(function(i, el) {
        var paper;
        paper = Raphael(el);
        $(el).data('settings.svgnature', settings);
        $(el).on('mousedown.svgnature', drawStart);
        $(el).on('mouseup.svgnature', drawEnd);
        $(el).on('mousemove.svgnature', move);
        $(el).on('touchstart.svgnature', drawStart);
        $(el).on('touchend.svgnature', drawEnd);
        $(el).on('touchmove.svgnature', move);
        return $(el).data('paper.svgnature', paper);
      });
    };
    return $.fn.svgnature = function() {
      var args, defaults, elements, method, settings;
      method = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      elements = $(this);
      if (method === 'getURI') {
        return getSVG(elements);
      } else if (method === 'getPath') {
        return getPath(elements);
      } else if (method === 'setPath') {
        return setPath(elements, args[0]);
      } else if (method === 'clearPath') {
        return clearPath(elements);
      } else {
        defaults = {
          'stroke': '#000',
          'stroke-width': '2'
        };
        settings = $.extend(defaults, method);
        return initialize(elements, settings);
      }
    };
  })(jQuery);

}).call(this);
